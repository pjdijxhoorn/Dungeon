name: Push-to-deploy

on:
    push:
        branches:
            -   main

jobs:
    # test:
    #     env:
    #         DBHOST: localhost
    #         DBPORT: 5432
    #         DBPASSWORD: postgres
    #         DBNAME: postgres
    #         DBUSER: postgres
    #     runs-on: ubuntu-latest
    #     services:
    #         postgres:
    #             image: postgres:latest
    #             env:
    #                 POSTGRES_DB: postgres
    #                 POSTGRES_USER: postgres
    #                 POSTGRES_PASSWORD: postgres
    #             ports:
    #                 - 5432:5432
    #             options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    #     steps:
    #         - name: Checkout Repository
    #           uses: actions/checkout@v2

    #         - name: Setup python
    #           uses: actions/setup-python@v2
    #           with:
    #             python-version: "3.9"
            
    #         - name: Install requirements
    #           run: pip install -r requirements.txt
            
    #         - name: Testing with pytest
    #           run: |
    #             pip install httpx
    #             pip install pytest
    #             python -m pytest
    
    terraform:
        runs-on: ubuntu-latest
        # needs: test
        env:
            TF_VAR_do_token: "${{ secrets.OCEANTOKEN }}"
    
        steps:
            - name: Checkout code
              uses: actions/checkout@v2
      
            - uses: hashicorp/setup-terraform@v1
              with:
                terraform_wrapper: false
                cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
                terraform_version: 1.3.0
     
            - name: Run terraform
              working-directory: ./config/terraform
              run: | 
                terraform init -upgrade
                terraform plan 
                terraform apply -auto-approve
    
    build:
      runs-on: ubuntu-latest
      needs: terraform
      steps:
        -   name: Checkout files
            uses: actions/checkout@v2

        -   name: Install doctl
            uses: digitalocean/action-doctl@v2
            with:
                token: ${{ secrets.OCEANTOKEN }}
        
        -   name: Build container image
            run: docker build -t ${{ secrets.Registy_digital_OCEAN }}/dungeon-run:$(echo $GITHUB_SHA | head -c7) .

        -   name: Log in to DigitalOcean Container Registry with short-lived credentials
            run: doctl registry login --expiry-seconds 1200
        
        -   name: Push image to DigitalOcean Container Registry
            run: docker push ${{ secrets.Registy_digital_OCEAN }}/dungeon-run:$(echo $GITHUB_SHA | head -c7)      
    
    
    deploy:
        runs-on: ubuntu-latest
        needs: build
        steps:
            -   name: Checkout files
                uses: actions/checkout@v2
            
            -   name: Install doctl
                uses: digitalocean/action-doctl@v2
                with:
                    token: ${{ secrets.OCEANTOKEN }}
                    
            -   name: Log in to DigitalOcean Container Registry with short-lived credentials
                run: doctl registry login --expiry-seconds 1200
            
            -   name: Update deployment file
                run: |
                  TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>| ${{ secrets.Registy_digital_OCEAN }}/dungeon-run:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment/deployment.yml
                  sed -i "s|<DBUSERNAME>|$(doctl db conn $(doctl db list --format ID --no-header) --format User --no-header)|" $GITHUB_WORKSPACE/config/deployment/deployment.yml
                  sed -i "s|<DBPASSWORD>|$(doctl db conn $(doctl db list --format ID --no-header) --format Password --no-header)|" $GITHUB_WORKSPACE/config/deployment/deployment.yml
                  sed -i "s|<DBHOST>|$(doctl db conn $(doctl db list --format ID --no-header) --format Host --no-header)|" $GITHUB_WORKSPACE/config/deployment/deployment.yml
                  sed -i "s|<DBPORT>|$(doctl db conn $(doctl db list --format ID --no-header) --format Port --no-header)|" $GITHUB_WORKSPACE/config/deployment/deployment.yml
                  sed -i "s|<DBDATABASE>|$(doctl db conn $(doctl db list --format ID --no-header) --format Database --no-header)|" $GITHUB_WORKSPACE/config/deployment/deployment.yml

            -   name: Save DigitalOcean kubeconfig with short-lived credentials
                run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 dungeon-run-cluster
            
            -   name: Deploy to DigitalOcean Kubernetes
                run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment/deployment.yml
            
            -   name: Verify deployment
                run: kubectl rollout status deployment/dungeon-run